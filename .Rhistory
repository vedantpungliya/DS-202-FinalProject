lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
library(leaflet)
library(dplyr)
# Extract longitude and latitude from 'Vehicle.Location'
ev_data <- ev_data %>%
mutate(
Longitude = as.numeric(gsub(".*\\((-?\\d+\\.\\d+) .*", "\\1", Vehicle.Location)),
Latitude = as.numeric(gsub(".* (-?\\d+\\.\\d+)\\)", "\\1", Vehicle.Location))
)
mean_latitude <- mean(ev_data$Latitude, na.rm = TRUE)
mean_longitude <- mean(ev_data$Longitude, na.rm = TRUE)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 4)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 6)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = mean_longitude, lat = mean_latitude, zoom = 6)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = mean_longitude, lat = mean_latitude, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 46.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.1, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
if (!requireNamespace("readr", quietly = TRUE)) {
library(readr)}
if (!requireNamespace("dplyr", quietly = TRUE)) {
library(dplyr)
}
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
car_brand_counts <- table(ev_data$Make)
car_brand_df <- as.data.frame(car_brand_counts)
colnames(car_brand_df) <- c("Make", "Count")
# Sort the car brands
sorted_car_brands <- car_brand_df[order(-car_brand_df$Count), ]
ggplot(data = sorted_car_brands[1:15, ], aes(x = reorder(Make, Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Purchases by Car Brand", x = "Car Brand", y = "Number of Purchases") +
theme(axis.text.x = element_text( vjust = 1)) +
coord_flip()
# individual boxplots for top 5
ggplot(data = sorted_car_brands[1:5, ], aes(x = Make, y = Count)) +
geom_boxplot() +
labs(title = "Sales Comparison of Top 5 Vehicle Brands", y = "Number of Purchases") +
scale_y_continuous(breaks = seq(0, max(sorted_car_brands$Count) * 1.5, by = 10000))  # Customize intervals by 10
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
# Get the top brands by sales (e.g., top 5 brands)
top_brands <- head(brand_sales$Make, 5)
# Filter the data to include only the top brands
top_brand_trends <- ev_data %>%
filter(Make %in% top_brands) %>%
brand_trends <- df %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
# Get the top brands by sales (e.g., top 5 brands)
top_brands <- head(brand_sales$Make, 5)
# Filter the data to include only the top brands
ev_data_top_brands <- ev_data %>%
filter(Make %in% top_brands)
# Group the filtered data by Model.Year and Make, and calculate the count
brand_trends <- ev_data_top_brands %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
# Plot brand trends for top brands over the years
ggplot(brand_trends, aes(x = Model.Year, y = Count, color = Make)) +
geom_line() +
geom_point() +
labs(title = "Brand Trends Over the Years for Top Brands",
x = "Model Year",
y = "Number of Models",
color = "Brand") +
theme_minimal()
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoomSnap = 7.5)  # Set the view to the specified coordinates and zoom level
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 6.5)  # Set the view to the specified coordinates and zoom level
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
library(leaflet)
# Extract longitude and latitude from 'Vehicle.Location'
ev_data <- ev_data %>%
mutate(
Longitude = as.numeric(gsub(".*\\((-?\\d+\\.\\d+) .*", "\\1", Vehicle.Location)),
Latitude = as.numeric(gsub(".* (-?\\d+\\.\\d+)\\)", "\\1", Vehicle.Location))
)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 6.5)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
knitr::opts_chunk$set(echo = TRUE)
ev_data_price <- ev_data %>%
filter(Base.MSRP != 0)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
ev_data_price <- ev_data %>%
filter(Base.MSRP != 0)
#head(ev_data_price)
library(scales)
# Assuming 'Electric.Range' and 'Base.MSRP' are the column names in your ev_data_price dataframe
ggplot(ev_data_price, aes(x = Electric.Range, y = Base.MSRP)) +
geom_point(color = 'steelblue') +
labs(title = 'Scatter Plot of Electric Range vs. Price',
x = 'Electric Range (10,000s)',
y = 'Price (10,000s)') +
scale_x_continuous(labels = comma_format(scale = 1e-4)) +
scale_y_continuous(labels = comma_format(scale = 1e-4)) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
car_brand_counts <- table(ev_data$Make)
car_brand_df <- as.data.frame(car_brand_counts)
colnames(car_brand_df) <- c("Make", "Count")
# Sort the car brands
sorted_car_brands <- car_brand_df[order(-car_brand_df$Count), ]
ggplot(data = sorted_car_brands[1:15, ], aes(x = reorder(Make, Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Purchases by Car Brand", x = "Car Brand", y = "Number of Purchases") +
theme(axis.text.x = element_text( vjust = 1)) +
coord_flip()
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
# Get the top brands by sales (e.g., top 5 brands)
top_brands <- head(brand_sales$Make, 5)
# Filter the data to include only the top brands
ev_data_top_brands <- ev_data %>%
filter(Make %in% top_brands)
# Group the filtered data by Model.Year and Make, and calculate the count
brand_trends <- ev_data_top_brands %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
# Plot brand trends for top brands over the years
ggplot(brand_trends, aes(x = Model.Year, y = Count, color = Make)) +
geom_line() +
geom_point() +
labs(title = "Brand Trends Over the Years for Top Brands",
x = "Model Year",
y = "Number of Models",
color = "Brand") +
theme_minimal()
# Filter out rows where electric range is not 0 and group by brand and where sales are 1000 or more
filtered_data <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Make) %>%
filter(n() >= 1000) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = filtered_data[1:10, ], aes(x = reorder(Make, Avg_Fuel_Range), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkblue") +
labs(title = "Top Brands by Average Fuel Range", x = "Car Brand", y = "Average Fuel Range") +
theme(axis.text.x = element_text( vjust = 1)) +
coord_flip()
merged_data <- merge(filtered_data, car_brand_df, by = "Make", all.x = TRUE)
lm_model <- lm(Count ~ Avg_Fuel_Range, data = merged_data)
intercept <- coef(lm_model)[1]
slope <- coef(lm_model)[2]
correlation <- cor(merged_data$Count, merged_data$Avg_Fuel_Range)
equation <- paste("y =", round(slope, 2), "x +", round(intercept, 2), "(R =", round(correlation, 2), ")")
ggplot(data = merged_data, aes(x = Avg_Fuel_Range, y = Count, fill = Make)) +
geom_point(color = "blue", size = 3, shape = 21) +  # Using shape 21 for filled points
geom_text(x = max(merged_data$Avg_Fuel_Range), y = max(merged_data$Count), label = equation, hjust = 1.5, vjust = 1.5) +  # Adding equation text
labs(title = "Average Fuel Range vs Total Sales", x = "Average Fuel Range", y = "Total Sales", fill = "Make") +
theme_minimal() +
scale_fill_manual(values = rainbow(length(unique(merged_data$Make))))  # Filling points with different colors for each brand
#Histogram of spread
ggplot(ev_data, aes(x = Model.Year)) + geom_histogram(binwidth = 1, fill = "darkgreen") +
labs(title = "Model of EV's Recorded by Year", x = "Model Year", y = "Count")
summary_data <- ev_data %>%
summarise(mean = mean(Model.Year),
median = median(Model.Year),
min = min(Model.Year),
max = max(Model.Year))
summary_data
#Boxplot of spread
ggplot(ev_data, aes(x = Model.Year)) + geom_boxplot()
#Histogram of spread
ggplot(ev_data, aes(x = Model.Year)) + geom_histogram(binwidth = 1, fill = "darkgreen") +
labs(title = "Model of EV's Recorded by Year", x = "Model Year", y = "Count")
summary_data <- ev_data %>%
summarise(mean = mean(Model.Year),
median = median(Model.Year),
min = min(Model.Year),
max = max(Model.Year))
summary_data
#Boxplot of spread
ggplot(ev_data, aes(x = Model.Year)) + geom_boxplot()
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range")
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range")+coord_flip()
ev_data$Electric.Vehicle.Type <- factor(ev_data$Electric.Vehicle.Type)
levels(ev_data$Electric.Vehicle.Type)
ggplot(ev_data, aes(x = Electric.Vehicle.Type)) +
geom_bar(fill = "steelblue") +
labs(title = "Count of Electric Vehicle Types",
x = "Electric Vehicle Type",
y = "Count") +
theme_minimal() +
scale_y_continuous(labels = scales::comma_format(scale = 1))
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range")+coord_flip()
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range")
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Horizontal flip with angle = 90 and hjust = 1
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 30, hjust = 1))  # Horizontal flip with angle = 90 and hjust = 1
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 15, hjust = 1))  # Horizontal flip with angle = 90 and hjust = 1
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 15))  # Horizontal flip with angle = 90 and hjust = 1
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 45))  # Horizontal flip with angle = 90 and hjust = 1
year_range <- ev_data %>%
filter(Electric.Range != 0) %>%
group_by(Model.Year) %>%
summarise(Avg_Fuel_Range = mean(Electric.Range, na.rm = TRUE)) %>%
arrange(desc(Avg_Fuel_Range))
ggplot(data = year_range, aes(x = reorder(Model.Year, Model.Year), y = Avg_Fuel_Range)) +
geom_bar(stat = "identity", fill = "darkred") +
labs(title = "Change in Electric Range by Year", x = "Model Year", y = "Average Fuel Range") +
theme(axis.text.x = element_text(angle = 0)) # Horizontal flip with angle = 90 and hjust = 1
knitr::opts_chunk$set(echo = TRUE)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
str(ev_data)
