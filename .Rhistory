top_brands <- sorted_car_brands$Make[1:10]
model_year_counts <- ev_data %>%
group_by(Model.Year, Model) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(Model.Year, desc(Count))
# Filter the model_year_counts data frame to include only the top 10 brands by car sales
filtered_model_year_counts <- model_year_counts %>%
filter(Model %in% top_brands)
# Plotting the trends of vehicle models for the top 10 brands over the years
ggplot(filtered_model_year_counts, aes(x = Model.Year, y = Count, color = Model)) +
geom_line() +
labs(title = "Trends of Vehicle Models Over the Years (Top 10 Brands)", x = "Year", y = "Number of Occurrences") +
theme_minimal() +
theme(legend.position = "right")  # Adjust legend position as needed
filtered_data <- ev_data %>%
mutate(Model.Year = lubridate::year(as.Date(Model.Year))) %>%  # Extract year from Model_Year column
select(Model.Year, Model)
model_year_counts <- ev_data %>%
group_by(Model.Year, Model) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(Model.Year, desc(Count))
top_brands <- sorted_car_brands$Make[1:10]
# Filter the model_year_counts data frame to include only the top 10 brands by car sales
filtered_model_year_counts <- model_year_counts %>%
filter(Model %in% top_brands)
# Plotting the trends of vehicle models for the top 10 brands over the years
ggplot(filtered_model_year_counts, aes(x = Model.Year, y = Count, color = Model)) +
geom_line() +
labs(title = "Trends of Vehicle Models Over the Years (Top 10 Brands)", x = "Year", y = "Number of Occurrences") +
theme_minimal() +
theme(legend.position = "right")  # Adjust legend position as needed
filtered_data <- ev_data %>%
mutate(Model.Year = lubridate::year(as.Date(Model.Year))) %>%  # Extract year from Model_Year column
select(Model.Year, Model)
model_year_counts <- filtered_data %>%
group_by(Model.Year, Model) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(Model.Year, desc(Count))
top_brands <- sorted_car_brands$Make[1:10]
# Filter the model_year_counts data frame to include only the top 10 brands by car sales
filtered_model_year_counts <- model_year_counts %>%
filter(Model %in% top_brands)
# Plotting the trends of vehicle models for the top 10 brands over the years
ggplot(filtered_model_year_counts, aes(x = Model.Year, y = Count, color = Model)) +
geom_line() +
labs(title = "Trends of Vehicle Models Over the Years (Top 10 Brands)", x = "Year", y = "Number of Occurrences") +
theme_minimal() +
theme(legend.position = "right")  # Adjust legend position as needed
# Assuming filtered_data contains Model.Year and Model columns extracted from ev_data
# Assuming sorted_car_brands contains the top brands in descending order of car sales
library(dplyr)
library(ggplot2)
# Calculate model_year_counts based on filtered_data
model_year_counts <- filtered_data %>%
mutate(Model.Year = lubridate::year(as.Date(Model.Year))) %>%
group_by(Model.Year, Model) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(Model.Year, desc(Count))
# Get the top 10 brands by car sales from sorted_car_brands
top_brands <- sorted_car_brands$Make[1:10]
# Filter model_year_counts to include only the top 10 brands by car sales
filtered_model_year_counts <- model_year_counts %>%
filter(Model %in% top_brands)
# Plot the trends of vehicle models for the top 10 brands over the years
ggplot(filtered_model_year_counts, aes(x = Model.Year, y = Count, color = Model)) +
geom_line() +
labs(title = "Trends of Vehicle Models Over the Years (Top 10 Brands)", x = "Year", y = "Number of Occurrences") +
theme_minimal() +
theme(legend.position = "right")  # Adjust legend position as needed
filtered_data <- ev_data %>%
mutate(Model.Year = lubridate::year(as.Date(Model.Year))) %>%  # Extract year from Model_Year column
select(Model.Year, Model)
# Calculate model_year_counts based on filtered_data
model_year_counts <- filtered_data %>%
mutate(Model.Year = lubridate::year(as.Date(Model.Year))) %>%
group_by(Model.Year, Model) %>%
summarise(Count = n()) %>%
ungroup() %>%
arrange(Model.Year, desc(Count))
# Get the top 10 brands by car sales from sorted_car_brands
top_brands <- sorted_car_brands$Make[1:10]
# Filter model_year_counts to include only the top 10 brands by car sales
filtered_model_year_counts <- model_year_counts %>%
filter(Model %in% top_brands)
# Plot the trends of vehicle models for the top 10 brands over the years
ggplot(filtered_model_year_counts, aes(x = Model.Year, y = Count, color = Model)) +
geom_line() +
labs(title = "Trends of Vehicle Models Over the Years (Top 10 Brands)", x = "Year", y = "Number of Occurrences") +
theme_minimal() +
theme(legend.position = "right")  # Adjust legend position as needed
brand_trends <- df %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
#install.packages("readr")  #
#install.packages("dplyr")  #
#install.packages("ggplot")
if (!requireNamespace("readr", quietly = TRUE)) {
library(readr)}
if (!requireNamespace("dplyr", quietly = TRUE)) {
library(dplyr)
}
library(ggplot2)
library(tidyverse)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility,-Vehicle.Location)
head(ev_data)
car_brand_counts <- table(ev_data$Make)
car_brand_df <- as.data.frame(car_brand_counts)
colnames(car_brand_df) <- c("Make", "Count")
# Sort the car brands
sorted_car_brands <- car_brand_df[order(-car_brand_df$Count), ]
ggplot(data = sorted_car_brands[1:15, ], aes(x = reorder(Make, Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Purchases by Car Brand", x = "Car Brand", y = "Number of Purchases") +
theme(axis.text.x = element_text( vjust = 1)) +
coord_flip()
# individual boxplots for top 5
ggplot(data = sorted_car_brands[1:5, ], aes(x = Make, y = Count)) +
geom_boxplot() +
labs(title = "Sales Comparison of Top 5 Vehicle Brands", y = "Number of Purchases") +
scale_y_continuous(breaks = seq(0, max(sorted_car_brands$Count) * 1.5, by = 10000))  # Customize intervals by 10
brand_trends <- df %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
knitr::opts_chunk$set(echo = TRUE)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 3)  # Set the view to the specified coordinates and zoom level
#install.packages("readr")  #
#install.packages("dplyr")  #
#install.packages("ggplot")
if (!requireNamespace("readr", quietly = TRUE)) {
library(readr)}
if (!requireNamespace("dplyr", quietly = TRUE)) {
library(dplyr)
}
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
head(ev_data)
ev_data$Electric.Vehicle.Type <- factor(ev_data$Electric.Vehicle.Type)
levels(ev_data$Electric.Vehicle.Type)
ggplot(ev_data, aes(x = Electric.Vehicle.Type)) +
geom_bar(fill = "steelblue") +
labs(title = "Count of Electric Vehicle Types",
x = "Electric Vehicle Type",
y = "Count") +
theme_minimal() +
scale_y_continuous(labels = scales::comma_format(scale = 10000))
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 3)  # Set the view to the specified coordinates and zoom level
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 3)  # Set the view to the specified coordinates and zoom level
library(leaflet)
library(dplyr)
# Extract longitude and latitude from 'Vehicle.Location'
ev_data <- ev_data %>%
mutate(
Longitude = as.numeric(gsub(".*\\((-?\\d+\\.\\d+) .*", "\\1", Vehicle.Location)),
Latitude = as.numeric(gsub(".* (-?\\d+\\.\\d+)\\)", "\\1", Vehicle.Location))
)
mean_latitude <- mean(ev_data$Latitude, na.rm = TRUE)
mean_longitude <- mean(ev_data$Longitude, na.rm = TRUE)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 3)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -95.7129, lat = 37.0902, zoom = 4)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data_washington <- ev_data %>%
filter(State == "WA")
head(ev_data)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
nrow(ev_data)
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
nrow()
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
nrow(ev_data)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
nrow(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
nrow(ev_data)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 4)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
library(leaflet)
library(dplyr)
# Extract longitude and latitude from 'Vehicle.Location'
ev_data <- ev_data %>%
mutate(
Longitude = as.numeric(gsub(".*\\((-?\\d+\\.\\d+) .*", "\\1", Vehicle.Location)),
Latitude = as.numeric(gsub(".* (-?\\d+\\.\\d+)\\)", "\\1", Vehicle.Location))
)
mean_latitude <- mean(ev_data$Latitude, na.rm = TRUE)
mean_longitude <- mean(ev_data$Longitude, na.rm = TRUE)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 4)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 6)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = mean_longitude, lat = mean_latitude, zoom = 6)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = mean_longitude, lat = mean_latitude, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 46.7511, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.1, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 7)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
if (!requireNamespace("readr", quietly = TRUE)) {
library(readr)}
if (!requireNamespace("dplyr", quietly = TRUE)) {
library(dplyr)
}
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
car_brand_counts <- table(ev_data$Make)
car_brand_df <- as.data.frame(car_brand_counts)
colnames(car_brand_df) <- c("Make", "Count")
# Sort the car brands
sorted_car_brands <- car_brand_df[order(-car_brand_df$Count), ]
ggplot(data = sorted_car_brands[1:15, ], aes(x = reorder(Make, Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Number of Purchases by Car Brand", x = "Car Brand", y = "Number of Purchases") +
theme(axis.text.x = element_text( vjust = 1)) +
coord_flip()
# individual boxplots for top 5
ggplot(data = sorted_car_brands[1:5, ], aes(x = Make, y = Count)) +
geom_boxplot() +
labs(title = "Sales Comparison of Top 5 Vehicle Brands", y = "Number of Purchases") +
scale_y_continuous(breaks = seq(0, max(sorted_car_brands$Count) * 1.5, by = 10000))  # Customize intervals by 10
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
# Get the top brands by sales (e.g., top 5 brands)
top_brands <- head(brand_sales$Make, 5)
# Filter the data to include only the top brands
top_brand_trends <- ev_data %>%
filter(Make %in% top_brands) %>%
brand_trends <- df %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
library(ggplot2)
library(dplyr)
# Calculate sales count for each brand
brand_sales <- ev_data %>%
group_by(Make) %>%
summarise(Sales = n()) %>%
arrange(desc(Sales))  # Sort by sales count in descending order
# Get the top brands by sales (e.g., top 5 brands)
top_brands <- head(brand_sales$Make, 5)
# Filter the data to include only the top brands
ev_data_top_brands <- ev_data %>%
filter(Make %in% top_brands)
# Group the filtered data by Model.Year and Make, and calculate the count
brand_trends <- ev_data_top_brands %>%
group_by(Model.Year, Make) %>%
summarise(Count = n()) %>%
ungroup()
# Plot brand trends for top brands over the years
ggplot(brand_trends, aes(x = Model.Year, y = Count, color = Make)) +
geom_line() +
geom_point() +
labs(title = "Brand Trends Over the Years for Top Brands",
x = "Model Year",
y = "Number of Models",
color = "Brand") +
theme_minimal()
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoomSnap = 7.5)  # Set the view to the specified coordinates and zoom level
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 6.5)  # Set the view to the specified coordinates and zoom level
#install.packages("readr")
#install.packages("dplyr")
#install.packages("ggplot")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
ev_data <- read.csv("https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD")
str(ev_data)
ev_data <- ev_data %>%
select(-X2020.Census.Tract, -DOL.Vehicle.ID,-Legislative.District,-VIN..1.10.,-Electric.Utility)
ev_data <- ev_data %>%
filter(State == "WA")
head(ev_data)
library(leaflet)
# Extract longitude and latitude from 'Vehicle.Location'
ev_data <- ev_data %>%
mutate(
Longitude = as.numeric(gsub(".*\\((-?\\d+\\.\\d+) .*", "\\1", Vehicle.Location)),
Latitude = as.numeric(gsub(".* (-?\\d+\\.\\d+)\\)", "\\1", Vehicle.Location))
)
# Create a leaflet map and set the view to specific coordinates
map <- leaflet() %>%
addTiles() %>%
setView(lng = -120.7401, lat = 47.25, zoom = 6.5)  # Set the view to the specified coordinates and zoom level
# Add markers for each data point
map <- map %>% addCircleMarkers(
data = ev_data,
lng = ~Longitude,  # Use the Longitude column from ev_data
lat = ~Latitude,   # Use the Latitude column from ev_data
radius = 0.5,      # Adjust the radius of markers as needed
color = "blue"
)
# Display the map
map
